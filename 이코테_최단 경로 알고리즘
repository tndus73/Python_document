# 최단 경로 알고리즘
- 가장 짧은 경로를 찾는 알고리즘

# 다익스트라 최단 경로 알고리즘
- 특정 노드에서 출발하여 다른 모든 노드로 가는 최단 경로 계산
- 음의 간선이 없을때 사용
- 그리디 알고리즘으로 분류
- 단계마다 방문하지 않은 녿느 중에서 최단 거리가 가장 짧은 노드를 선택하기 우해 힙 자료구조 이
- 시간복잡도 O(V의 2승)
- 힙 자료구조 이용하는 시간복잡도 O(ElogV) : E개 원소, 노드 개수 V
1. 출발 노드 설정
2. 최단 거리 테이블 초기화
3. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드 선택
4. 해당 노드 거쳐 다른 노드로 가는 비용 계산하여 최단 거리 테이블 갱신
5. 3번, 4번 반복

# 우선순위 큐
- 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조
- 힙에서 사용됨(최소 힙, 최대 힙)
- 튜플형태로 코딩

ex) 간단한 다익스트라 알고리즘
import sys
input = sys.stdin.readline
INF = int(1e9)  #무한을 의미하는 값으로 10억 설정
n, m = map(int, input().split())  #노드의 개수, 간선의 개수 입력
start = int(input())  #시작노드번호 입력받기
graph = [[]] for i in range(n+1)]  #각 노드에 연결되어 있는 노드에 대한 정보 담는 리스트
visited = [False] * (n+1)  #방문한 적 있는지 체크하는 목적의 리스트
distance = [INF] * (n+1)  #최단 거리 테이블을 모두 무한으로 초기화
#모든 간선 정보 입력받기
for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b,c))  # a번 노드에서 b번 노드로 가는 비용이 C라는 의미
#방문하지 않은 노드 중에서, 가장 최단 거리가 짧은 노드의 번호를 반환
def get_smallest_node():
    min_value = INF
    index = 0  #가장 최단 거리가 짧은 노드(인덱스)
    for i in range(1, n+1):
        if distance[i] < min_value and not visited[i]:
            min_value = distance[i]
            index = i
    return index
def dijkstra(start):
    #시작 노드에 대해서 초기화
    distance[start] = 0
    visited[satrt] = True
    for j in graph[start]:
        distance[j[0]] = j[1]
    #시작 노드를 제외한 전체 n-1개의 노드에 대해 반복
    for i in range(n-1):
        #현재 최단 거리가 가장 짧은 노드 꺼내, 방문처리
        now = get_smallest_node()
        visited[now] = True
        #현재 노드와 연결된 다른 노드 확인
        for j in graph[now]:
            cost = distance[now] + j[1]
            #현재 노드를 걸쳐 다른 노드로 이동하는 거리가 더 짧은 경우
            if cost < distance[j[0]]:
                distance[j[0]] = cost
#다익스트라 알고리즘 수행
dijkstra(start)
#모든 노드로 가기 위한 최단 거리 출력
for i in range(1,n+1):
      if distance[i] == INF:  #도달할 수 없는 경우, 무한이라고 출력
          print("INFINITY")
      else:
          print(distance[i])

ex) 개선된 다익스트라 알고리즘(힙구조 사용)
import sys
input = sys.stdin.readline
INF = int(1e9)  #무한을 의미하는 값으로 10억 설정
n, m = map(int, input().split())  #노드의 개수, 간선의 개수 입력
start = int(input())  #시작노드번호 입력받기
graph = [[]] for i in range(n+1)]  #각 노드에 연결되어 있는 노드에 대한 정보 담는 리스트
distance = [INF] * (n+1)  #최단 거리 테이블을 모두 무한으로 초기화
#모든 간선 정보 입력받기
for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b,c))  # a번 노드에서 b번 노드로 가는 비용이 C라는 의미
def dijkstra(start):
    q = []
    #시작노드로 가기 위한 최단 경로는 0으로 설정, 큐에 사입
    heapq.heappush(q, (0, start))
    distance[start] = 0
    while q :  #쿠가 비어있지 않다면
          dist, now = heapq.heappop(q)  #가장 최단 거리가 짧은 노드에 대한 정보 꺼내기
          if distance[now] < dist:   #현재 노드가 이미 처리된 적 있는 노드라면 무시
              continue
          for i in graph[now]:  #현재 노드와 연결된 다른 인접한 노드들을 확인
              cost = dist + i[1]
              if cost < distance[i[0]]:  #현재 노드를 거쳐, 다른 노드로 이동하는 거리가 더 짧은 경우
                  distance[i[0]] = cost
                  heapq.heappush(q, (cost, i[0]))
#다익스트라 알고리즘 수행
dijkstra(start)
#모든 노드로 가기 위한 최단 거리 출력
for i in range(1,n+1):
      if distance[i] == INF:  #도달할 수 없는 경우, 무한이라고 출력
          print("INFINITY")
      else:
          print(distance[i])

# 플로이드 워셜 알고리즘
- 모든 지점에서 다른 모든 지점까지의 최단 경로 계산
- 시간복잡도 O(N의3승) : N의 크기가 작을때 효율적
ex)
INF = int(1e의9승)  #무한을 의미하는 값으로 10억 설정
n = int(input())
m = int(input())
#2차원 리스트(그래프 표현)만들고, 모든 값 무한으로 초기화
graph = [[INF] * (n+1) for _ in range(n+1)]
#자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
for a in range(1, n+1):
    for b in range(1, n+1):
        if a == b:
            graph[a][b] = 0
#각 간선에 대한 정보를 입력받아, 그 값으로 초기화
for _ in range(m):
    a, b, c = map(int, input().split())  #a에서 b로 가는 비용을 c라고 설정
    graph[a][b] = c
#점화식에 따라 플로이드 워셜 알고리즘 수행
for k in range(1, n+1):
    for a in range(1, n+1):
        for b in range(1, n+1):
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])
#수행된 결과 출력
for a in range(1, n+1):
    for b in range(1, n+1):
        if graph[a][b] == INF:
            print("INFINITY", end=' ')
        else:
            print(graph[a][b], end=' ')
print()

예시) C에서 각 도시 사이에 설치된 통로를 거쳐, 최대한 많이 퍼져나갈 때 도시의 개수, 걸리는 시
- 방향성 있는 간선
- 한 도시에서 다른 도시까지 최단거리문제(다익스트라 알고리즘 활용)

풀이)
import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)
n, m, start = map(int, input().split())
graph = [[] for i in range(n+1)]
distance = [INF] * (n+1)
#모든 간선 정보 입력받기
for _ in range(m):
    x, y, z = map(int, input().split())
    graph[x].append((y,z))
def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start))
    distance[start] = 0
    while q:  #큐가 비어있지 않다면
          dist, now = heapq.heappop(q)  #가장 최단 거리가 짧은 노드에 대한 정보 꺼내기
          if distance[now] < dist:
              continue
          for i in graph[now]:  #현재 노드와 연결된 다른 인접한 노드 확인
              cost = dist + i[1]
          if cost < distance[i[0]]:  #현재 노드를 거쳐, 다른 노드로 이동하는 거리가 더 짧은 경우
              distance[i[0]] = cost
              heapq.heappush(q, (cost, i[0]))
dijkstra(start)  #다익스트라 알고리즘 수행
count = 0  #도달할 수 있는 노드의 개수
max_distance = 0  #도달 할 수 있는 노드 중에서, 가장 멀리 있는 노드와의 최단 거리
for d in distance:
    if d != INF:
        count += 1
        max_distance = max(max_distance, d)
print(count-1, max_distance)

예시) 1번 회사에서 K번 회사 방문 후 X번 회사로 가는 최소 시간
- 양방향, 각 간선 1
- 전체 회사 개수 N(최대100), 경로의 개수 M
- 1번 노드에서 X까지의 최단거리 + X에서 K까지의 최단 거리 계산 (플로이드 워셜 알고리즘 활용)

풀이)
INF = int(1e의9승)  #무한을 의미하는 값으로 10억 설정
n, m = map(int, input().split())
graph = [[INF] * (n+1) for _ in range(n+1)]
#자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
for a in range(1, n+1):
    for b in range(1, n+1):
        if a == b:
            graph[a][b] = 0
#각 간선에 대한 정보를 입력받아, 그 값으로 초기화
for _ in range(m):
    a, b = map(int, input().split())  #a와 b가 서로에게 가는 비용이 1
    graph[a][b] = 1
    graph[b][a] = 1
#거쳐 갈 노드 x와 최종 목적지 노드 K를 입력받기
x, k = map(int, input().split())
#점화식에 따라 플로이드 워셜 알고리즘 수행
for k in range(1, n+1):
    for a in range(1, n+1):
        for b in range(1, n+1):
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])
#수행된 결과 출력
distance = graph[1][k] + graph[k][x]
if distance >= INF:
     print("-1')   #도달 할 수 없는 경우, -1 출력
else:
     print(distance)
