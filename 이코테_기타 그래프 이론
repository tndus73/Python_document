#서로소 집합 자료구조(합치기 찾기 자료구조)
- 서로소 집합(공통원소가 없는 두 집합)을 처리하기 위한 자료구조
1. 합집합 : 두개 원소가 포함된 집합을 하나의 집합으로 합침
- A와 B의 루트 노드 A', B'를 찾는다.
(더 큰 노드가 작은 루트노드를 가리키도록 설정 : 진짜 루트 노드를 찾기 위해 부모테이블을 계속 확인하며 거슬러 올라가야함)
- A'를 B'의 부모 노드로 설정
2. 찾기 : 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산
ex) 기본적인 서로소 집합 알고리즘 소스코드
#특정 원소가 속한 집합 찾기
def find_parent(parent, x):
    if parent[x] != x:  #루트 노드가 아니라면, 루트 노드 찾을 때까지 재귀적으로 호출
        return find_parent(parent, parent[x])
    return x
#두 원소가 속한 집합 합치기
def union_parent(parent, a, b):
    a = ind_parent(parentm, a)
    b = ind_parent(parentm, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b
#노드의 개수와 간선(union 연산)의 개수 입력받기
v, e = map(int, input().split())
parent = [0]*(v+1)  #부모 테이블 초기화
#부모 테이블상에서, 부모를 자기 자신으로 초기화
for i in range(1, v+1):
      parent[i] = i
#union 연산을 각각 수행
for i in range(e):
    a, b = map(int, input().split())
    union_parent(parent, a, b)
#각 원소가 속한 집합 출력
print('각 원소가 속한 집합 : ', end='')
for i in range(1, v+1):
    print(find_parent(parent, i), end=' ')
print
#부모 테이블 내용 출력
print('부모 테이블: ', end='')
for i in range(1, v+1):
    print(parent[i], end=' ')

문제점) 합집합 연산이 편향되게 이뤄지는 경우 찾기 함수가 비효율적으로 동작(최악의 시간복잡도 O(V))
해결) 경로 압축 이용
- 찾기 함수를 재귀적으로 호출한 뒤에 부모 테이블 값을 바로 갱신(해당 노드의 루트 노드가 부모 노드)

ex) 개선된 서로소 집합 알고리즘 소스코드
def find_parent(parent, x):
    if parent[x] != x:  #루트 노드가 아니라면, 루트 노드 찾을 때까지 재귀적으로 호출
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

#서로소 집합을 활용한 사이클 판별
- 무방향 그래프 내에서 사이크 판별(방향 그래프 내에서 사이클 여부는 DFS 이용)
1. 각 간선을 확인하여 두 노드의 루트 노드 확인
- 루트 노드가 서로 다르다면 두 노드에 대하여 union 연산 수행
- 루트 노드가 서로 같다면 사이클 발생
2. 1번 과정 반복
ex) 서로소 집합 활용한 사이크 판별 소스코드
def find_parent(parent, x):
    if parent[x] != x:  #루트 노드가 아니라면, 루트 노드 찾을 때까지 재귀적으로 호출
        parent[x] = find_parent(parent, parent[x])
    return parent[x]
#두 원소가 속한 집합 합치기
def union_parent(parent, a, b):
    a = ind_parent(parentm, a)
    b = ind_parent(parentm, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b
#노드의 개수와 간선(union 연산)의 개수 입력받기
v, e = map(int, input().split())
parent = [0]*(v+1)  #부모 테이블 초기화
#부모 테이블상에서, 부모를 자기 자신으로 초기화
for i in range(1, v+1):
      parent[i] = i
cycle = False  #사이클 발생 여부
for i in range(e):
    a, b = map(int, input().split())
    #사이클이 발생한 경우 종료
    if find_parent(parent, a) == find_parent(parent, b):
        cycle = True
        break
    #사이클이 발생하지 않았다면 합집합 수행
    else:
        union_part(parent, a, b)
if cycle:
    print("사이클이 발생했습니다.")
else:
    print("사이클이 발생하지 않았습니다.")
